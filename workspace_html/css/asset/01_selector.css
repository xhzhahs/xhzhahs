/* css 주석 */


/* 
    선택자 우선순의
    - 구체적일수록 우선 순위가 높다.
    - 동일한 우선순위면 나중에 나온 것이 높다.
    - !imortant가 여러군데에 붙어있으면 기존 우선순위 순으로 따라간다.
    
    브라우저 내장 -> 전체 선택자 -> 태그 선택자 
    -> [속성] 또는 클래스 선택자 -> # 아이디 선택자 -> !important 선택자
    -> 인라인(태그에 style 속성으로 직접 적는 것)
*/


/*
    전체 선택자 = *
    모두 해당
    우선순위가 가장 낮다.
    */

    /* 색상 선택 */
* {
    color: red;
}

/* tag 선택자 */
/* h2인 글씨들만 해당 */
h2 {
    font-size: 400%;
    color: blue;
}

/* id 선택자 우선순위가 높음*/
/* 
    #으로 시작
    id가 a1인 글씨만 해당
    한개만 쓰는 것이 좋다.
*/
#a1 {
    color: rgb(0, 0, 0);
}
/* 모든 호버 해당 */
/* :hover {
 color: aqua;
} */

/* class 선택자 */
/* 
    .으로 시작
    class가 c1인 글씨만 해당
    여러개 선택 가능
*/
.c1 {
    background-color: green;
}
/* class만 가능 글씨 크기 키워줌 */
.bigText {
    font-size: 30px;
}

/* id가 div인 글씨만 해당 */
#div1 {
    background-color: grey;
}

/* 마우스 올렸을 때 */
#div1:hover {
    background-color: yellow;
}
/* 클릭 했을 때 */
#div1:active {
    color: black;
    font-size: 20px;
}
/* focus는 클릭했을 때만 변경 */
.text1:focus {
    background-color: yellow;
}

/* 누군가의 첫번째 자식 */
li:first-child{
    color: blue;
}

ul:first-child{
    font-size: 30px;
}

/* 실제 등장하는 요소 중 첫번째 */
ul:first-of-type {
    text-decoration: underline;
}
/* 
    table tr에 적용
    nth는 몇번째라는 의미
    2n은 짝수만 적용
    2n-1은 홀수번째만 적용 
*/
tr:nth-child(2n-1) {
    background-color: yellow;
}

/*
    before , after
    꼭 content가 들어가야함.
    항상 그 글씨 앞이나 뒤에 content 내용이 들어가게 함. 
    content는 선택이 안됨. 문신같은 존재
    */
h3:after {
    content: "AFTER";
    font-size: 10px;
    color: black;
}
h3:before {
    content: "BEFORE";
    font-size: 10px;
    color: black;
}

/* 다중 선택자 */
/* li {
    테두리
    border: 1px solid red;
}
h3 {
    border: 1px solid red;
} */
    /* , 사용으로 동시에 선택 가능 */
li, h3, #div1 {
    border: 1px solid red;
}

/* > : 바로 아래 자식 요소만 */
/* ol > li 는 ol의 바로 아래 자식 li만 해당 */
#ol > li {
    color: black;
}

/* >대신 띄어쓰기 사용은 자손들 모두를 대상으로 적용 */
#ol li {
    border: 1px solid black;
}
/* 
    복합선택자
    띄어쓰기 없이 붙여쓰는 경우 선택자를 동시에 만족하는 요소
    class의 경우 .이 &역할을 해줌 id도 가능
    */
ul.a.b{
    color: aqua;
}

/* 
    속성 존재 여부 []
    [href]는 href속성이 있는 것 전부 다를 의미           
    */
[href] {
    color: black;
}
/*
    속성과 값이 모두 일치하는 요소
    [id=naver]는 id가 naver인 것을 의미]
    #naver는 [id=naver]의 줄임말
*/
[id=naver] {
/* a[id=naver] { */
/* a#naver {*/    
    font-size: 30px;
}

/* 
    ^는 ~로 시작하는 의미
    값으로 시작하는 속성과 속성 값의 요소
    속성은 상관없다.
    href라는 속성의 값이 http로 시작하는 요소
*/
[href^=https] {
    color: green;
}
/* data-seq라는 속성의 값이 title_로 시작하는 요소*/
li[data-seq^=title_] {
    color: green;
}

/* 
    $는 해당 값으로 끝나는 속성값을 가지는 요소
*/
li[data-seq$=_title] {
    color: green;
}

/* 패스워드에 포커스가 갔을 때 배경을 노란색으로 변경 */
input[type=password]:focus {
    background-color: yellow;
}
/* 부정 선택자 */
/* input 태그 중에서 .c3 클래스가 없는 모든 것 */
input:not(.c3) {
    color: green
}
/* 속성 값에서  단어로 존재하는 것(공백으로 분리되어 있는 것)을 찾아줌*/
/*  .c4는 [class~=:"c4"]의 줄임말 */
input[class~="c4"] {
    color: green;
}
/* 
    <input class="c4 c5 c41"
    *=c4는 c41도 찾아오므로 잘 쓰지 않음
*/
/* 속성 값에 c4가 포함되는 것을 선택함 */
input[class*=c4]{
    color: gray;
}

/* 마우스 드래그해서 선택할때 변경 */
::selection {
    background-color: aqua;
}
/* :checked는 체크가 되었을 때 변경 */
input[type=checkbox]:checked {
    width: 50px;
    height: 50px;
}
/* 
    형제 요소 찾기 +
    형제요소는 위부터 순서대로
*/
/* 체크가 되었을 때만 span의 형태를 바꾸라는 의미 */
input[type=checkbox]:checked + span {
    font-size: 50px;
}

#s1 {
    background-color: blue;
}
/* #선택자보다 우선순위가 낮지만 !important로 인해 우선순위가 올라감 */
span {
    background-color: yellow !important;
}